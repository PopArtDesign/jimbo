#!/usr/bin/env bash

set -eu -o pipefail
shopt -s lastpipe nullglob

source "${app_libs_loader}"

app::use 'database'
app::use 'error'
app::use 'site'

main() {
    while [ $# -gt 0 ]; do
        case "${1}" in
            -- ) shift && break ;;
            -* ) app::error::unknown_option "${1}" ;;
            * ) break
        esac

        shift
    done

    if [ $# -gt 2 ]; then
        app::error::too_many_arguments 2
    fi

    if [ $# -lt 1 ]; then
        app::error::missing_argument 'path to site'
    fi

    if [ $# -lt 2 ]; then
        app::error::missing_argument 'path to backup file'
    fi

    local site_path="$(realpath "${1}")"
    local backup_file="$(realpath "${2}")"

    app::site::check_site_path_exists_and_readable "${site_path}"

    if [ -f "${backup_file}" ]; then
        app::error::error "Backup file already exists: ${backup_file}"
    fi

    local -A site_config=(
        [backup_file]="${backup_file}"
    )

    app::site::detect_config "${site_path}"

    printf '\nProcessing... This may take a while.\n'

    app_backup_site_files

    app_backup_site_database

    printf '\nDone: %s\n' "${backup_file}"
}

app_backup_site_files() {
    local site_path="${site_config[root]}"
    local backup_file="${site_config[backup_file]}"

    local include="${site_config[include]:-}"
    local exclude="${site_config[exclude]:-}"

    set -o noglob
    pushd "${site_path}" > /dev/null

    if [[ -z "${exclude}${include}" ]]; then
        app_zip "${backup_file}" .
    else
        if [[ -n "${include}" ]]; then
            app_zip "${backup_file}" . -i ${include}
        fi

        if [[ -n "${exclude}" ]]; then
            app_zip "${backup_file}" . -x ${exclude}
        fi
    fi

    set +o noglob
    popd > /dev/null
}

app_backup_site_database() {
    [[ -z "${site_config[database_name]:-}" ]] && return

    local backup_file="${site_config[backup_file]}"
    local dump_file_suffix="${site_config[database_dump_file_suffix]}"

    local dump="$(command mktemp --suffix "${dump_file_suffix}")"

    app::database::dump > "${dump}" \
        && app_zip -j "${backup_file}" "${dump}"

    rm --force "${dump}"
}

app_zip() {
    command zip -qur "-${COMPRESSION_LEVEL:-9}" "$@"
}

main "$@"
