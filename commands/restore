#!/usr/bin/env bash

set -eu -o pipefail
shopt -s lastpipe nullglob

source "${app_libs_loader}"

app::use 'database'
app::use 'error'
app::use 'site'
app::use 'util'

main() {
    while [[ $# -gt 0 ]]; do
        case "${1}" in
            -- ) shift && break ;;
            -* ) app::error::unknown_option "${1}" ;;
            * ) break
        esac

        shift
    done

    if [[ $# -gt 2 ]]; then
        app::error::too_many_arguments 2
    fi

    if [[ $# -lt 1 ]]; then
        app::error::missing_argument 'path to site or config file'
    fi

    if [[ $# -lt 2 ]]; then
        app::error::missing_argument 'path to backup file'
    fi

    local site_path="${1}"
    local backup_file="$(realpath "${2}")"

    if ! [[ -f "${backup_file}" && -r "${backup_file}" ]]; then
        app::error::error "Backup file not exists or not readable: ${backup_file}"
    fi

    printf '\nProcessing... This may take a while.\n'

    app_restore_site_files

    local -A site_config=(
        [backup_file]="${backup_file}"
    )

    app::site::detect_config "${site_path}"

    app_restore_site_database

    printf '\nDone: %s\n' "${site_config[root]}"
}

app_restore_site_files() {
    local site_root=''
    local _site_path=$(app::util::realpath "${site_path}")

    if ! [[ -e "${_site_path}" ]]; then
        app::error::error "Site root or config file not exist: ${_site_path}"
    fi

    if [[ -d "${_site_path}" ]]; then
        site_root="${_site_path}"
    else
        local -A site_config=()

        app::site::load_config "${_site_path}" < "${_site_path}"

        site_root="$(realpath "${site_config[root]}")"
    fi

    if ! [[ -d "${site_root}" ]]; then
        app::error::error "Site path not exists or not a directory: ${site_root}"
    fi

    if ! [[ -z "$(command ls -A ${site_root})" ]]; then
        app::error::error "Site path is not empty: ${site_root}"
    fi

    if ! [[ -w "${site_root}" ]]; then
        app::error::error "Site path is not writable: ${site_root}"
    fi

    command unzip -qd "${site_root}" "${backup_file}"
}

app_restore_site_database() {
    local site_path="${site_config[root]}"
    local dump_file_suffix="${site_config[database_dump_file_suffix]}"

    local -a dump_files=("${site_path}/"*"${dump_file_suffix}")

    [[ "${#dump_files[@]}" -eq 0 ]] && return

    if [[ "${#dump_files[@]}" -gt 1 ]]; then
        app::error::error "Multiple database dump files found: ${dump_files[*]}"
    fi

    dump="$(realpath "${dump_files[0]}")"

    read -r -p "Database dump found: ${dump##*/}. Load? [y/n] "

    [[ "${REPLY}" != 'y' ]] && return

    app::database::cli < "${dump}"

    command rm --force "${dump}"
}

main "$@"
