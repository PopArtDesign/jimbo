#!/usr/bin/env bash

source "${app_common}"

app::use 'database'
app::use 'error'
app::use 'site'

main() {
    local opt_help=false

    while [[ $# -gt 0 ]]; do
        case "${1}" in
            -h | --help ) opt_help=true ;;
            -- ) shift && break ;;
            -?* ) app::error::unknown_option "${1}" ;;
            * ) break
        esac

        shift
    done

    if [[ "${opt_help}" == 'true' ]]; then
        app_help

        exit 0
    fi

    if [[ $# -gt 2 ]]; then
        app::error::too_many_arguments 2
    fi

    if [[ $# -lt 1 ]]; then
        app::error::missing_argument 'path to site or config file'
    fi

    if [[ $# -lt 2 ]]; then
        app::error::missing_argument 'path to backup file'
    fi

    local site_path="${1}"
    local backup_file="$(realpath -qm "${2}")"

    if ! [[ "${backup_file}" == *.zip ]]; then
        app::error::error "Backup file must have .zip extension: ${backup_file}"
    fi

    if [[ -e "${backup_file}" ]]; then
        app::error::error "Backup file already exists: ${backup_file}"
    fi

    local -A site_config=(
        [backup_file]="${backup_file}"
    )

    app::site::load_site_config "${site_path}"

    printf 'Site: %s\n' "${site_config[root]}"
    printf 'Plugin: %s\n' "${site_config[plugin]}"

    echo 'Processing... This may take a while.'

    app_create_backup_file

    app_backup_site_files

    app_backup_site_database

    printf 'Done: %s\n' "${backup_file}"
}

app_create_backup_file() {
    : | command zip -q "${backup_file}" - && command zip -qd "${backup_file}" -
}

app_backup_site_files() {
    local site_path="${site_config[root]}"
    local backup_file="${site_config[backup_file]}"

    local include="${site_config[include]:-}"
    local exclude="${site_config[exclude]:-}"

    set -o noglob
    pushd "${site_path}" > /dev/null

    if [[ -z "${exclude}${include}" ]]; then
        app_zip "${backup_file}" .
    else
        if [[ -n "${include}" ]]; then
            app_zip "${backup_file}" . -i ${include}
        fi

        if [[ -n "${exclude}" ]]; then
            app_zip "${backup_file}" . -x ${exclude}
        fi
    fi

    set +o noglob
    popd > /dev/null
}

app_backup_site_database() {
    [[ -z "${site_config[database_name]:-}" ]] && return

    local backup_file="${site_config[backup_file]}"
    local dump_file_suffix="${site_config[database_dump_suffix]}"

    local dump="$(command mktemp --suffix "${dump_file_suffix}")"

    app::database::dump > "${dump}" \
        && app_zip -j "${backup_file}" "${dump}"

    rm --force "${dump}"
}

app_zip() {
    # Ignore exit code 12: zip has nothing to do
    command zip -qur "-${COMPRESSION_LEVEL:-9}" "$@" || [[ "$?" -eq 12 ]]
}

app_help() {
    local app_command="${0##*/}"

    cat <<HELP
Backup site

Usage:

  ${app_name} ${app_command} [options] <site path> <backup file>

Arguments:

  site path    Path to site's root or config file
  backup file  Path to backup file (.zip)

Options:

  -h, --help  Show this help
HELP
}

main "$@"
